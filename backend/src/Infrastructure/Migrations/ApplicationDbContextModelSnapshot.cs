// <auto-generated />
using System;
using ExtensionEventsManager.Core.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ExtensionEventsManager.Core.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("EventShift", b =>
                {
                    b.Property<int>("EventsId")
                        .HasColumnType("int");

                    b.Property<int>("ShiftsId")
                        .HasColumnType("int");

                    b.HasKey("EventsId", "ShiftsId");

                    b.HasIndex("ShiftsId");

                    b.ToTable("EventShift");
                });

            modelBuilder.Entity("ExtensionEventsManager.Core.Domain.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Chave primária do chat.");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("UserAId")
                        .HasColumnType("int")
                        .HasComment("ID do participante A (menor ID do par).");

                    b.Property<int>("UserBId")
                        .HasColumnType("int")
                        .HasComment("ID do participante B (maior ID do par).");

                    b.HasKey("Id");

                    b.HasIndex("UserAId", "UserBId")
                        .IsUnique();

                    b.ToTable("Chats", (string)null);
                });

            modelBuilder.Entity("ExtensionEventsManager.Core.Domain.Entities.ChatMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Chave primária da mensagem de chat.");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChatId")
                        .HasColumnType("int")
                        .HasComment("Chave estrangeira para o chat ao qual a mensagem pertence.");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("varchar(4000)")
                        .HasComment("Conteúdo textual da mensagem (até 4000 caracteres).");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasComment("Data/hora (UTC) em que a mensagem foi criada.");

                    b.Property<int>("SenderId")
                        .HasColumnType("int")
                        .HasComment("ID do usuário remetente da mensagem.");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.ToTable("ChatMessages", (string)null);
                });

            modelBuilder.Entity("ExtensionEventsManager.Core.Domain.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Chave primária do evento.");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2056)
                        .HasColumnType("varchar(2056)")
                        .HasComment("Descrição do evento.");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)")
                        .HasComment("Data de término das inscrições.");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime(6)")
                        .HasComment("Data de realização do evento.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasComment("Nome do evento.");

                    b.Property<int>("Slots")
                        .HasColumnType("int")
                        .HasComment("Quantidade de vagas disponíveis para inscrição.");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)")
                        .HasComment("Data de início das inscrições.");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasComment("Indica se o evento está ativo (true) ou cancelado (false).");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasComment("Tipo do evento (Lecture/Dynamic/Practice).");

                    b.HasKey("Id");

                    b.ToTable("Events", null, t =>
                        {
                            t.HasCheckConstraint("CK_Events_Type_Enum", "`Type` IN (1, 2, 3)");
                        });
                });

            modelBuilder.Entity("ExtensionEventsManager.Core.Domain.Entities.Registration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Chave primária da inscrição.");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Attended")
                        .HasColumnType("tinyint(1)")
                        .HasComment("Indica presença do participante no evento (true/false).");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)")
                        .HasComment("Data/hora da realização da inscrição.");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("Justification")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasComment("Justificativa de ausência (quando o participante não comparece).");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasComment("Resultado da seleção do evento para o inscrito (Registered/Selected/NotSelected).");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("Registrations", null, t =>
                        {
                            t.HasCheckConstraint("CK_Registrations_Status_Enum", "(`Status` IS NULL OR `Status` IN (1, 2, 3))");
                        });
                });

            modelBuilder.Entity("ExtensionEventsManager.Core.Domain.Entities.Shift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Chave primária do turno.");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Name")
                        .HasColumnType("int")
                        .HasComment("Enum do turno (Morning/Afternoon/Evening).");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Shift", null, t =>
                        {
                            t.HasCheckConstraint("CK_Shift_Name_Enum", "`Name` IN (1, 2, 3)");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = 2
                        },
                        new
                        {
                            Id = 3,
                            Name = 3
                        });
                });

            modelBuilder.Entity("ExtensionEventsManager.Core.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Chave primária do usuário.");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Cpf")
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)")
                        .HasComment("CPF do usuário.");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasComment("Email do usuário.");

                    b.Property<int>("Enrollment")
                        .HasColumnType("int")
                        .HasComment("Matrícula do aluno (número institucional).");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasComment("Nome do usuário.");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasComment("Senha do usuário, armazenada de forma hash.");

                    b.Property<int>("Period")
                        .HasColumnType("int")
                        .HasComment("Período atual do aluno (1 a 10).");

                    b.Property<int>("Profile")
                        .HasColumnType("int")
                        .HasComment("Perfil do usuário (Administrator/Monitor/Student).");

                    b.Property<string>("ResetPasswordToken")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasComment("Token de redefinição de senha.");

                    b.Property<DateTime>("ResetPasswordTokenExpiration")
                        .HasColumnType("datetime(6)")
                        .HasComment("Expiração do token de redefinição de senha.");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasComment("Status de conta do usuário (Active/Inactive).");

                    b.HasKey("Id");

                    b.HasIndex("Cpf")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Enrollment")
                        .IsUnique();

                    b.ToTable("Users", null, t =>
                        {
                            t.HasCheckConstraint("CK_Users_Profile_Enum", "`Profile` IN (1, 2, 3)");

                            t.HasCheckConstraint("CK_Users_Status_Enum", "`Status`  IN (1, 2)");
                        });
                });

            modelBuilder.Entity("EventShift", b =>
                {
                    b.HasOne("ExtensionEventsManager.Core.Domain.Entities.Event", null)
                        .WithMany()
                        .HasForeignKey("EventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExtensionEventsManager.Core.Domain.Entities.Shift", null)
                        .WithMany()
                        .HasForeignKey("ShiftsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExtensionEventsManager.Core.Domain.Entities.ChatMessage", b =>
                {
                    b.HasOne("ExtensionEventsManager.Core.Domain.Entities.Chat", null)
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExtensionEventsManager.Core.Domain.Entities.Registration", b =>
                {
                    b.HasOne("ExtensionEventsManager.Core.Domain.Entities.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExtensionEventsManager.Core.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ExtensionEventsManager.Core.Domain.Entities.Chat", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
